@* інжекція можлива в Razor *@
@inject ASP_PV411.Services.Random.IRandomService randomService;

@{
    ViewData["Title"] = "IoC";
}
<div class="text-center">
    <h1 class="display-4">Інверсія управління. Сервіси.</h1>
</div>
@ViewData["rnd"] <br />
@ViewData["ref"] ||| @randomService.GetHashCode() <br />
@ViewData["ctrl"] <br />

<p>
    <b>Інверсія управління</b> (IoC - Inversion of control) - архітектурний шаблон згідно з яким контроль управління (контроль за) життєвим циклом об'єктів перекладається на єдиний модуль. Технічною мовою, замість інструкцій <code>new</code> для створення об'єктів здійснюється запит до цього модуля.
</p>
<p>
    <b>Інжекція</b> (DI Dependency Injection) - спосіб автоматизації запитів до модуля IoC відповідно до якого запити здійснюються шляхом аналізу конструкторів класів, об'єкти яких вимагається побудувати. Замість прямого звернення до модуля необхідні для класу об'єкти зазначаються у його конструкторі.
</p>
<p>
    <b>Сервіси</b> (у контексті IoC) - об'єкти, що їх життєвим циклом керує модуль IoC, тобто ті, які призначені для інжектування. Зазвичай, мова іде про класи, об'єкти яких не повинні можуть знадобитися у різних частинах проєкту. Наприклад, є вимова безпеки, щоб генератор випадкових чисел був винятково один. Перестворення нових генераторів може призвести до повторення послідовності чисел.
</p>
<p>
    Процес використання IoC складається з двох етапів: реєстрація сервісів із зазначенням їх життєвих циклів, та резолюція (Resolve) - вирішення задачі створення об'єктів шляхом підстановки до них усіх запитаних сервісів. 
</p>
<h3>
    Життєві цикли сервісів
</h3>
<table class="table">
    <thead>
        <tr>
            <th>Назва</th>
            <th>Оновлення сторінки</th>
            <th>Різні точки інжекції</th>
            <th>Опис</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Singleton</td>
            <td>Не змінюється</td>
            <td>Не змінюється</td>
            <td>Не перестворюється ніколи</td>
        </tr>
        <tr>
            <td>Transient</td>
            <td>Змінюється</td>
            <td>Змінюється</td>
            <td>Перестворюється для кожної інжекції</td>
        </tr>
        <tr>
            <td>Scoped</td>
            <td>Не змінюється</td>
            <td>Не змінюється</td>
            <td>Постійний для одного запиту, з іншим перестворюється</td>
        </tr>
    </tbody>
</table>
<p>
    <b>Принцип інверсії залежностей</b> (DIP - Dependency inversion principle) - один з принципів SOLID (не слід створювати залежності від реалізацій [класів], перевагу слід надати залежностям від абстракцій [інтерфейсів]). Слідування цьому принципу дозволяє легко перепикатись на нові реалізації сервісів, а також повертатись до попередніх (скасовувати оновлення). При створенні сервісу необхідно почати зі створення інтерфейсу, через який сервіси будуть впроваджені до точок інжекції.
</p>
